type Comment {
  created_at: DateTime!
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime!
  id: ID!
  image: String
  subreddit_id: ID
  tittle: String
  username: String
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{name: "post_id", field: "id"}]
    )
  comments: [Comment]
    @materializer(
      query:"getCommentByPostID"
      arguments: [{name: "post_id", field : "id"}]
    )
  subreddit: [subreddit]
    @materializer(
      query: "getSubredditListById"
      arguments: [{name: "id", field: "subreddit_id"}]
    )

}

type subreddit {
  id: ID!
  created_at: DateTime!
  topic: String
}

type Subreddit {
  id: ID!
  name: String!
  created_at: String!
}

 
type Vote {
  created_at: DateTime!
  id: ID!
  post_id: ID
  upvote: Boolean
  username: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentByPostID(post_id :ID!) : [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1 
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id :ID!) : [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "vote" where "post_id" = $1 
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )

  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  postBySubreddit_id(subreddit_id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postBySubreddit_idAndBody(subreddit_id: ID!, body: String!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      order by "post"."created_at" desc 
      """
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )

  getPostListByPostId(post_id: ID!): Post
  @dbquery(
    type: "postgresql"
    query: """
    select * from "post"
    where "post"."id" = $1
    """
    configuration: "postgresql_config"
  )
  


  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select "post".id as id, "post".*, "subreddit"."topic" 
      from "post"
      join "subreddit" on "subreddit"."id" = "post"."subreddit_id"
      where "subreddit"."topic" = $1
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )  





  postPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "subreddit_id", "tittle", "username" FROM "post" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Subreddit' "

  getSubredditListById(id: ID!) : [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subreddit" where "id" = $1 
      """
      configuration: "postgresql_config"
    )

  getSubredditListLimit(limit: Int!) : [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subreddit"
      order by "created_at" desc
      limit $1 
      """
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String!): [subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subreddit" where "topic" = $1 
      """
      configuration: "postgresql_config"
    )
  subredditList: [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  subredditPaginatedList(first: Int, after: Int): [subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "subreddit" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  voteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )


}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(
    username: String!
    post_id: ID!
    text: String!
    id: ID!
    created_at: DateTime!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )

  insertVote(post_id:ID!, username: String!, upvote:Boolean!): Vote
    @dbquery(
      type: "postgresql"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )



  insertComment(post_id: ID! , username: String!, text: String!): Comment
    @dbquery(
      type: "postgresql"
      table: "comment"
      dml: INSERT
        
      configuration: "postgresql_config"
    )

  " Mutations for type 'Post' "
  deletePost(
    body: String!
    tittle: String!
    subreddit_id: ID!
    id: ID!
    created_at: DateTime!
    username: String!
    image: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String!
    tittle: String!
    subreddit_id: ID!
    username: String!
    image: String!
  ): Post
    @dbquery(
      type: "postgresql"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
  )
  
  " Mutations for type 'Subreddit' "
  deleteSubreddit(topic: String!, created_at: DateTime!, id: ID!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSubreddit(topic: String, created_at: DateTime!): subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )
  " Mutations for type 'Vote' "
  deleteVote(
    username: String!
    post_id: ID!
    id: ID!
    created_at: DateTime!
    upvote: Boolean!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )

}
